apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "com.github.karlicoss.checker_fenum_android_demo"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

configurations {
    // TODO extend from something???
    checkerFramework {
        description = 'The Checker Framework: custom pluggable types for Java'
    }
}

// you have to pass the annotation class names to be used by the Fenum checker
// TODO this should be automated, but initially ok to hardcode
def annotations = [
        'FolderId',
        'MessageId',
].collect { name -> 'com.github.karlicoss.fenum_android_demo.checker_example_annotations.' + name }


dependencies {
    def checkerFrameworkVersion = '2.4.0'
    // TODO figure out which of these are actually necessary...
    implementation "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    annotationProcessor "org.checkerframework:checker:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
}

import static groovy.json.JsonOutput.*
def pprint(s) {
    print prettyPrint(toJson(s))
}

project.afterEvaluate {
    def variants
    if (project.plugins.hasPlugin(com.android.build.gradle.AppPlugin)) {
        def app = project.extensions.getByType(com.android.build.gradle.AppExtension)
        variants = app.getApplicationVariants()
    } else if (project.plugins.hasPlugin(com.android.build.gradle.LibraryPlugin)) {
        def lib = project.extensions.getByType(com.android.build.gradle.LibraryExtension)
        variants = lib.getLibraryVariants()
    } else {
        throw new GradleException('You must apply Android application plugin or Android library plugin first!')
    }

    variants.all { variant ->
        def compiledFenumsDir = file(new File(project.buildDir, 'fenums')) // TODO better name?

        def compileFenumsTask = project.task(
                "compileFenums${variant.name.capitalize()}",
                type: JavaCompile,
        ) {
            // TODO output which annotations were detected
            source = [
                    // TODO better detection?
                    "src/main/java/com/github/karlicoss/fenum_android_demo/checker_example_annotations/FolderId.java",
                    "src/main/java/com/github/karlicoss/fenum_android_demo/checker_example_annotations/MessageId.java"
            ].collect { path -> project.file(path) }
            destinationDir = compiledFenumsDir
            classpath = files(configurations.checkerFramework.asPath)
        }

        def compileTask = variant.javaCompiler
        /*
            Fenum checker is basically default JavaCompileTask with some additional compiler arguments.
            I don't want to mess with the original task, so I copy it first.
            TODO is there a better way of copying task? Let me know! Couldn't find any cloning method.
         */
        def fenumTask = project.task(
                "checkFenums${variant.name.capitalize()}",
                type: JavaCompile,
                dependsOn: [
                        compileTask.getTaskDependencies(),
                        compileTask, // TODO not sure why, should be unnecessary, but fails without it
                        compileFenumsTask, // to provide annotations for annotation processor
                ]
        ) {
            // TODO don't need to compile the annotations again here? But for simplicity, ok now to compile everything
            source = compileTask.source
            classpath = compileTask.classpath
            destinationDir = new File(project.buildDir, 'checker-classes-ignore')
            options.compilerArgs = compileTask.options.compilerArgs
            options.bootClasspath = compileTask.options.bootClasspath
        }

        /*
            Now, configure Checker Framework for this new task
            Based on official Gradle example
            https://github.com/typetools/checker-framework/blob/master/checker/examples/GradleExamples/GradleJava7Example/build.gradle
         */
        fenumTask.options.compilerArgs += [
            '-processor', 'org.checkerframework.checker.fenum.FenumChecker',
            '-Aquals=' + annotations.join(','),

            '-processorpath',
            [
                    "${configurations.checkerFramework.asPath}",
                    compiledFenumsDir,
            ].join(':'),
        ]
    }
}